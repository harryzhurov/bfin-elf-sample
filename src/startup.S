
#include <sys/platform.h>

#include <cplb.h>
#include <sys/anomaly_macros_rtl.h>
#include <defBF533.h>
#include <def_LPBlackfin.h>

//------------------------------------------------------------------------------
//
//   Data and code global and extern labels
//
//

    .section data1;
    .align 4;

    .extern ldf_stack_end;
    
    .extern __install_default_handlers;
    .extern __unknown_exception_occurred;

    .extern _HardwareInit;
    
    
    .section ctor;
    .align 4;
    ___ctor_table:
    .int;
    .global ___ctor_table;
    .type   ___ctor_table, STT_OBJECT;
    .extern ___ctorloop;
//------------------------------------------------------------------------------
//
//   The code
//
    //.section program;
    .text;
    .align 2;
    .global __start;
    .type __start, STT_FUNC;
    //.global .start.end;
    //.type .start.end,STT_FUNC;
    .extern _main;
    .type _main, STT_FUNC;
    
__start:
    //-------------------------------------------------------------------------
    // Avoid BF532 Anomaly #42 and turn on cycle conter
    r1     = 0x32; // default state + cycle counter enable
    syscfg = r1;
    //-------------------------------------------------------------------------
    // Set loop counters to zero, to make sure that hw loops are disabled 
    //                      and
    // Set DAG Length register to zero to avoid wrapping around with I-regs using
    r0  = 0;
    lc0 = r0;
    lc1 = r0;
    l0  = r0;
    l1  = r0;
    l2  = r0;
    l3  = r0;
    //-------------------------------------------------------------------------
    // Initialize the Event Vector table.
    p0.h = EVT0 >> 16;
    p0.l = EVT0 & 0xffff;
    //-------------------------------------------------------------------------
    // Install __unknown_exception_occurred in EVT so that 
    // there is defined behaviour.
    p0 += 2*4;      // Skip Emulation and Reset
    p1 = 13;
    r0.l = __unknown_exception_occurred;
    r0.h = __unknown_exception_occurred;
    lsetup (load_def_handler, load_def_handler) lc0 = p1;
load_def_handler:   
    [p0++] = r0;
    //-------------------------------------------------------------------------
    //
    // Switch to supervisor mode at the lowest priority
    // 
    // 
    p1.h = LPSM;
    p1.l = LPSM;
    [p0] = p1;

    // Initialise the stack.
    sp.l=ldf_stack_end;
    sp.h=ldf_stack_end;

    // We're still in supervisor mode at the moment, so the FP
    // needs to point to the supervisor stack.
    fp = sp;

    // Move the processor into user mode.
    p0.l = WaitForContinue;
    p0.h = WaitForContinue;
    reti = p0;
    r0.l = 0x8000; // IVG 15 mask
    sti r0;
    raise 15;

WaitForContinue:
    rti;

LPSM:               // the Lowest Priority Supervisor Mode      
    [--sp] = reti;  // re-enables the interrupt system
    sp += 4;        // increment on one 32-bit word
    sp += -12;      // And leave space for incoming "parameters"

    r0 = 0;       // load up R0 and R1 and call _main()
    r1 = r0;
    call.x ___ctorloop;

    sp += 12;       // Restore space for incoming parameters
    jump.x _main;





