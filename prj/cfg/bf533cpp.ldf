/*
** ADSP-BF533
** 
** __WORKAROUNDS_ENABLED
**    Defined by compiler when -workaround is used to direct LDF to
**    link with libraries that have been built with work-arounds
** USE_SDRAM
**     Makes SDRAM available as standard program/data memory, with no
**     cache configuration of L1. Heap space is moved into SDRAM.
**    enabled.
** USER_CRT
**    Specifies a custom or System Builder generated CRT object to use.
**
** Memory map.
**
** The known memory spaces are as follows:
**
** 0xFFE00000 - 0xFFFFFFFF  Core MMR registers (2MB)
** 0xFFC00000 - 0xFFDFFFFF  System MMR registers (2MB)
** 0xFFB01000 - 0xFFBFFFFF  Reserved
** 0xFFB00000 - 0xFFB00FFF  Scratch SRAM (4K)
** 0xFFA14000 - 0xFFAFFFFF  Reserved
** 0xFFA10000 - 0xFFA13FFF  Code SRAM / cache (16K)
** 0xFFA00000 - 0xFFA0FFFF  Code SRAM (64K)
** 0xFF908000 - 0xFF9FFFFF  Reserved
** 0xFF904000 - 0xFF907FFF  Data Bank B SRAM / cache (16K)
** 0xFF900000 - 0xFF903FFF  Data Bank B SRAM (16K)
** 0xFF808000 - 0xFF8FFFFF  Reserved
** 0xFF804000 - 0xFF807FFF  Data Bank A SRAM / cache (16K)
** 0xFF800000 - 0xFF803FFF  Data Bank A SRAM (16K)
** 0xEF000000 - 0xFF7FFFFF  Reserved
** 0x20400000 - 0xEEFFFFFF  Reserved
** 0x20300000 - 0x203FFFFF  ASYNC MEMORY BANK 3 (1MB)
** 0x20200000 - 0x202FFFFF  ASYNC MEMORY BANK 2 (1MB)
** 0x20100000 - 0x201FFFFF  ASYNC MEMORY BANK 1 (1MB)
** 0x20000000 - 0x200FFFFF  ASYNC MEMORY BANK 0 (1MB)
** 0x00000000 - 0x07FFFFFF  SDRAM MEMORY (16MB - 128MB)
** 
** Note:
**   0xFF807FDF-0xFF807FFF used by boot-loader for 0.2 silicon.
**   0xFF807FEF-0xFF807FFF used by boot-loader for 0.3 and later sicon.
**   does not impact use as heap or cache below.
** 
*/

ARCHITECTURE(ADSP-BF533)

#ifndef __NO_STD_LIB
SEARCH_DIR( $ADI_DSP/Blackfin/lib )
#endif

#ifdef __WORKAROUNDS_ENABLED  
    #define LIBSMALL libsmall532y.dlb
    #define FLT64  libf64ieee532y.dlb
    #define SFTFLT libsftflt532y.dlb
    #define LIBDSP libdsp532y.dlb
#else
    #define LIBSMALL libsmall532.dlb
    #define FLT64  libf64ieee532.dlb
    #define SFTFLT libsftflt532.dlb
    #define LIBDSP libdsp532.dlb
#endif  

#ifdef IEEEFP   
    #define FPLIBS SFTFLT, FLT64, LIBDSP
#else
    #define FPLIBS FLT64, LIBDSP, SFTFLT
#endif 


#ifdef __WORKAROUNDS_ENABLED  
    #define LIBS LIBSMALL, libevent532y.dlb, libcpp532y.dlb, libcpprt532y.dlb, FPLIBS, libio532y.dlb, libc532y.dlb 
#else
    #define LIBS LIBSMALL, libevent532.dlb, libcpp532.dlb, libcpprt532.dlb, FPLIBS, libio532.dlb, libc532.dlb
#endif 


#ifdef __WORKAROUNDS_ENABLED  
    $LIBRARIES = LIBS, librt_fileio532y.dlb;
#else
    $LIBRARIES = LIBS, librt_fileio532.dlb;
#endif  
  

// Libraries from the command line are included in COMMAND_LINE_OBJECTS.
#define CRT startup.doj

#ifdef __WORKAROUNDS_ENABLED    
    #define ENDCRT , crtn532y.doj
#else
    #define ENDCRT , crtn532.doj
#endif  

//------------------------------------------------------------------------------                    

$OBJECTS = CRT, $COMMAND_LINE_OBJECTS ENDCRT;

MEMORY
{
    /* Core memory-mapped registers - 2MB */
    /*
    MEM_CORE_MMRS  
    {        
        TYPE(RAM) WIDTH(8)
        START(0xFFE00000) END(0xFFFFFFFF)
    }
    */
    /* System memory-mapped registers - 2MB */
    MEM_SYS_MMRS  
    { 
        TYPE(RAM) WIDTH(8)
        START(0xFFC00000) END(0xFFDFFFFF)
    }

    /* L1 ScratchPad SRAM - 4K */
    MEM_L1_SCRATCH  
    {
        TYPE(RAM) WIDTH(8)
        START(0xffb00000) END(0xffb00fff)
    }
    
    /* L1 Instruction SRAM - 64K + 16K */
    MEM_L1_CODE 
    {   
        TYPE(RAM) WIDTH(8)
        START(0xFFA00000) END(0xFFA13FFF)
    }


    /* L1 Data B bank SRAM/Cache - 16K */
    MEM_L1_DATA_B   
    {
        TYPE(RAM) WIDTH(8)
        START(0xFF900000) END(0xff907eff)
    }

    /* L1 Data A bank SRAM/Cache - 16K */
    MEM_L1_DATA_A   
    {
        TYPE(RAM) WIDTH(8)
        START(0xFF800000) END(0xFF807FFF)
    }


    /* Stack - 256; Located in L1 Data B bank */
    MEM_STACK       
    {
        TYPE(RAM) WIDTH(8)
        START(0xff907f00) END(0xff907fff)
    }

/*** Note:
**   0xFF807FDF-0xFF807FFF used by boot-loader for 0.2 silicon.
**   0xFF807FEF-0xFF807FFF used by boot-loader for 0.3 and later sil
**  but does not impact use as heap below.
*/

    /* External Memory Spaces */

    /* Async Bank 3 - 1MB */
    MEM_ASYNC3     
    {        
        TYPE(RAM) WIDTH(8)
        START(0x20300000) END(0x203FFFFF)
    }
    /* Async Bank 2 - 1MB */
    MEM_ASYNC2     
    {        
        TYPE(RAM) WIDTH(8)
        START(0x20200000) END(0x202FFFFF)
    }
    /* Async Bank 1 - 1MB */
    MEM_ASYNC1     
    {        
        TYPE(RAM) WIDTH(8)
        START(0x20100000) END(0x201FFFFF)
    }
    
    /* Async Bank 0 - 1MB */
    MEM_ASYNC0             /* Async Bank 0 - 1MB */
    {
            TYPE(RAM) WIDTH(8)
            START(0x20000000) END(0x200FFFFF)
    }
    MEM_SDRAM0             /* SDRAM Bank 0 - 16MB-128M */
    {
            TYPE(RAM) WIDTH(8)
            START(0x00000000) END(0x07FFFFFF)
    }
}


PROCESSOR p0
{
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

        /* Following address must match start of MEM_L1_CODE */
        RESOLVE(__start, 0xFFA00000)
        KEEP(__start, _main)

    SECTIONS
    {
        l1_code
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L1_code) $LIBRARIES(L1_code))
            INPUT_SECTIONS( $OBJECTS(program) $LIBRARIES(program))
        } >MEM_L1_CODE

        l1_data_a
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS($OBJECTS(L1_data_a) $LIBRARIES(L1_data_a))
            INPUT_SECTIONS($OBJECTS(l1_data_a) $LIBRARIES(l1_data_a))
            INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
            INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
        } >MEM_L1_DATA_A

        bsz_L1_data_a ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_L1_DATA_A
 
        l1_data_b
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L1_data_b) $LIBRARIES(L1_data_b))
            INPUT_SECTIONS( $OBJECTS(bsz_init) $LIBRARIES(bsz_init))
            INPUT_SECTIONS( $OBJECTS(vtbl) $LIBRARIES(vtbl) )
            INPUT_SECTIONS( $OBJECTS(ctor) $LIBRARIES(ctor) )
            INPUT_SECTIONS( $OBJECTS(ctorl) $LIBRARIES(ctorl) )
            INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
            INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
            INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
        } >MEM_L1_DATA_B


        bsz_L1_data_b ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_L1_DATA_B

        stack
        {
            ldf_stack_space = .;
            ldf_stack_end   = ldf_stack_space + MEMORY_SIZEOF(MEM_STACK);
        } >MEM_STACK

                                         
        stack_and_heap_scratchpad
        {
            INPUT_SECTION_ALIGN(4)
            ldf_heap_space  = .;
            ldf_heap_end    = ldf_heap_space + 2048;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;
        } > MEM_L1_SCRATCH

        sdram
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
            INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
            INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
        } >MEM_SDRAM0
 
        bsz_sdram0 ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_SDRAM0
    }
}
